name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    name: Build All Modules
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Build all modules
        run: mvn clean verify

  lint-openapi:
    name: Lint OpenAPI Specs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install OpenAPI CLI
        run: npm install -g @redocly/cli

      - name: Validate Allegro API OpenAPI Spec
        run: redocly lint vlxtr-allegro-api/vlxtr-allegro-api.yaml --config .redocly.yaml

      - name: Validate Bambu API OpenAPI Spec
        run: redocly lint vlxtr-bambu-api/vlxtr-bambu-api.yaml --config .redocly.yaml

      - name: Validate Core API OpenAPI Spec
        run: redocly lint vlxtr-core-api/vlxtr-core-api.yaml --config .redocly.yaml

      - name: Validate API Gateway OpenAPI Spec
        run: redocly lint vlxtr-api-gateway/vlxtr-api-gateway.yaml --config .redocly.yaml

  format-check:
    name: Check YAML Formatting with Prettier
    runs-on: ubuntu-latest
    needs: lint-openapi
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Prettier
        run: npm install -g prettier

      - name: Check YAML formatting
        run: prettier --check "**/*.yaml"

  check-allegro-changes:
    name: Check Allegro API Changes
    runs-on: ubuntu-latest
    needs: format-check
    if: github.event_name == 'push' && success()
    outputs:
      changed: ${{ steps.detect_changes.outputs.allegro_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes in Allegro API
        id: detect_changes
        run: |
          allegro_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-allegro-api.yaml'; then
            allegro_changed="true"
          fi
          echo "allegro_changed=$allegro_changed" >> $GITHUB_ENV
          echo "::set-output name=allegro_changed::$allegro_changed"

  deploy-allegro:
    name: Deploy Allegro API
    runs-on: ubuntu-latest
    needs: check-allegro-changes
    if: needs.check-allegro-changes.outputs.changed == 'true' && success()
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Configure GitHub Packages Authentication
        run: |
          mkdir -p ~/.m2
          echo "<settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ github.token }}</password>
              </server>
            </servers>
          </settings>" > ~/.m2/settings.xml

      - name: Increment version for Allegro API
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-allegro-api -q -DforceStdout)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Apply versioning logic
          if [ "$patch" -eq 9 ]; then
            if [ "$minor" -eq 9 ]; then
              major=$((major + 1))
              minor=0
            else
              minor=$((minor + 1))
            fi
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_VERSION="$major.$minor.$patch"
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-allegro-api
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit updated version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git fetch origin master
          git checkout master

          git stash
          git pull --rebase origin master
          git stash pop || echo "No changes to apply"

          git add vlxtr-allegro-api/pom.xml
          git commit -m "Bump Allegro API client version to $NEW_VERSION"
          git push origin master

      - name: Deploy Allegro API
        run: mvn clean deploy -pl vlxtr-allegro-api
        env:
          GITHUB_TOKEN: ${{ github.token }}

  check-bambu-changes:
    name: Check Bambu API Changes
    runs-on: ubuntu-latest
    needs: format-check
    if: github.event_name == 'push' && success()
    outputs:
      changed: ${{ steps.detect_changes.outputs.bambu_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes in Bambu API
        id: detect_changes
        run: |
          bambu_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-bambu-api.yaml'; then
            bambu_changed="true"
          fi
          echo "bambu_changed=$bambu_changed" >> $GITHUB_ENV
          echo "::set-output name=bambu_changed::$bambu_changed"

  deploy-bambu:
    name: Deploy Bambu API
    runs-on: ubuntu-latest
    needs: check-bambu-changes
    if: needs.check-bambu-changes.outputs.changed == 'true' && success()
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Configure GitHub Packages Authentication
        run: |
          mkdir -p ~/.m2
          echo "<settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ github.token }}</password>
              </server>
            </servers>
          </settings>" > ~/.m2/settings.xml

      - name: Increment version for Bambu API
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-bambu-api -q -DforceStdout)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Apply versioning logic
          if [ "$patch" -eq 9 ]; then
            if [ "$minor" -eq 9 ]; then
              major=$((major + 1))
              minor=0
            else
              minor=$((minor + 1))
            fi
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_VERSION="$major.$minor.$patch"
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-bambu-api
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit updated version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git fetch origin master
          git checkout master

          git stash
          git pull --rebase origin master
          git stash pop || echo "No changes to apply"

          git add vlxtr-bambu-api/pom.xml
          git commit -m "Bump Bambu API client version to $NEW_VERSION"
          git push origin master

      - name: Deploy Bambu API
        run: mvn clean deploy -pl vlxtr-bambu-api
        env:
          GITHUB_TOKEN: ${{ github.token }}

  check-gateway-changes:
    name: Check API Gateway Changes
    runs-on: ubuntu-latest
    needs: format-check
    if: github.event_name == 'push' && success()
    outputs:
      changed: ${{ steps.detect_changes.outputs.gateway_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes in API Gateway
        id: detect_changes
        run: |
          gateway_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-api-gateway.yaml'; then
            gateway_changed="true"
          fi
          echo "gateway_changed=$gateway_changed" >> $GITHUB_ENV
          echo "::set-output name=gateway_changed::$gateway_changed"

  deploy-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: check-gateway-changes
    if: needs.check-gateway-changes.outputs.changed == 'true' && success()
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Configure GitHub Packages Authentication
        run: |
          mkdir -p ~/.m2
          echo "<settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ github.token }}</password>
              </server>
            </servers>
          </settings>" > ~/.m2/settings.xml

      - name: Increment version for API Gateway
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-api-gateway -q -DforceStdout)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Apply versioning logic
          if [ "$patch" -eq 9 ]; then
            if [ "$minor" -eq 9 ]; then
              major=$((major + 1))
              minor=0
            else
              minor=$((minor + 1))
            fi
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_VERSION="$major.$minor.$patch"
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-api-gateway
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit updated version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git fetch origin master
          git checkout master

          git stash
          git pull --rebase origin master
          git stash pop || echo "No changes to apply"

          git add vlxtr-api-gateway/pom.xml
          git commit -m "Bump API Gateway version to $NEW_VERSION"
          git push origin master

      - name: Deploy API Gateway
        run: mvn clean deploy -pl vlxtr-api-gateway
        env:
          GITHUB_TOKEN: ${{ github.token }}

  check-core-changes:
    name: Check Core API Changes
    runs-on: ubuntu-latest
    needs: format-check
    if: github.event_name == 'push' && success()
    outputs:
      changed: ${{ steps.detect_changes.outputs.core_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes in Core API
        id: detect_changes
        run: |
          core_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-core-api.yaml'; then
            core_changed="true"
          fi
          echo "core_changed=$core_changed" >> $GITHUB_ENV
          echo "::set-output name=core_changed::$core_changed"

  deploy-core:
    name: Deploy Core API
    runs-on: ubuntu-latest
    needs: check-core-changes
    if: needs.check-core-changes.outputs.changed == 'true' && success()
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Configure GitHub Packages Authentication
        run: |
          mkdir -p ~/.m2
          echo "<settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ github.token }}</password>
              </server>
            </servers>
          </settings>" > ~/.m2/settings.xml

      - name: Increment version for Core API
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-core-api -q -DforceStdout)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Apply versioning logic
          if [ "$patch" -eq 9 ]; then
            if [ "$minor" -eq 9 ]; then
              major=$((major + 1))
              minor=0
            else
              minor=$((minor + 1))
            fi
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_VERSION="$major.$minor.$patch"
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-core-api
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit updated version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git fetch origin master
          git checkout master

          git stash
          git pull --rebase origin master
          git stash pop || echo "No changes to apply"

          git add vlxtr-core-api/pom.xml
          git commit -m "Bump Core API version to $NEW_VERSION"
          git push origin master

      - name: Deploy Core API
        run: mvn clean deploy -pl vlxtr-core-api
        env:
          GITHUB_TOKEN: ${{ github.token }}
