name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    name: Build All Modules
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Build all modules
        run: mvn clean verify

  lint-openapi:
    name: Lint OpenAPI Specs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install OpenAPI CLI
        run: npm install -g @redocly/cli

      - name: Validate Allegro API OpenAPI Spec
        run: redocly lint vlxtr-allegro-api/vlxtr-allegro-api.yaml --config .redocly.yaml

      - name: Validate Bambu API OpenAPI Spec
        run: redocly lint vlxtr-bambu-api/vlxtr-bambu-api.yaml --config .redocly.yaml

      - name: Validate Core API OpenAPI Spec
        run: redocly lint vlxtr-core-api/vlxtr-core-api.yaml --config .redocly.yaml

      - name: Validate API Gateway OpenAPI Spec
        run: redocly lint vlxtr-api-gateway/vlxtr-api-gateway.yaml --config .redocly.yaml

  format-check:
    name: Check YAML Formatting with Prettier
    runs-on: ubuntu-latest
    needs: lint-openapi
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Prettier
        run: npm install -g prettier

      - name: Check YAML formatting
        run: prettier --check "**/*.yaml"

  check-all-changes:
    name: Check All API Changes
    runs-on: ubuntu-latest
    needs: format-check
    if: github.event_name == 'push' && success()
    outputs:
      allegro_changed: ${{ steps.detect_changes.outputs.allegro_changed }}
      bambu_changed: ${{ steps.detect_changes.outputs.bambu_changed }}
      gateway_changed: ${{ steps.detect_changes.outputs.gateway_changed }}
      core_changed: ${{ steps.detect_changes.outputs.core_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes in APIs
        id: detect_changes
        run: |
          allegro_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-allegro-api.yaml'; then
            allegro_changed="true"
          fi
          echo "allegro_changed=$allegro_changed" >> $GITHUB_OUTPUT

          bambu_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-bambu-api.yaml'; then
            bambu_changed="true"
          fi
          echo "bambu_changed=$bambu_changed" >> $GITHUB_OUTPUT

          gateway_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-api-gateway.yaml'; then
            gateway_changed="true"
          fi
          echo "gateway_changed=$gateway_changed" >> $GITHUB_OUTPUT

          core_changed="false"
          if git diff --name-only HEAD^ HEAD | grep -q 'vlxtr-core-api.yaml'; then
            core_changed="true"
          fi
          echo "core_changed=$core_changed" >> $GITHUB_OUTPUT

  deploy-apis:
    name: Deploy Changed APIs
    runs-on: ubuntu-latest
    needs: check-all-changes
    if: |
      needs.check-all-changes.outputs.allegro_changed == 'true' || 
      needs.check-all-changes.outputs.bambu_changed == 'true' || 
      needs.check-all-changes.outputs.gateway_changed == 'true' || 
      needs.check-all-changes.outputs.core_changed == 'true'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Configure GitHub Packages Authentication
        run: |
          mkdir -p ~/.m2
          echo "<settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ github.token }}</password>
              </server>
            </servers>
          </settings>" > ~/.m2/settings.xml

      - name: Update versions and deploy changed APIs
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git pull origin master

          increment_version() {
            local current_version=$1
            IFS='.' read -r major minor patch <<< "$current_version"

            if [ "$patch" -eq 9 ]; then
              if [ "$minor" -eq 9 ]; then
                major=$((major + 1))
                minor=0
              else
                minor=$((minor + 1))
              fi
              patch=0
            else
              patch=$((patch + 1))
            fi

            echo "$major.$minor.$patch"
          }

          CHANGED_MODULES=""
          COMMIT_MESSAGE="Update API versions:"

          if [[ "${{ needs.check-all-changes.outputs.allegro_changed }}" == "true" ]]; then
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-allegro-api -q -DforceStdout)
            NEW_VERSION=$(increment_version "$CURRENT_VERSION")
            mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-allegro-api
            CHANGED_MODULES="$CHANGED_MODULES vlxtr-allegro-api"
            COMMIT_MESSAGE="$COMMIT_MESSAGE allegro=$NEW_VERSION"
          fi

          if [[ "${{ needs.check-all-changes.outputs.bambu_changed }}" == "true" ]]; then
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-bambu-api -q -DforceStdout)
            NEW_VERSION=$(increment_version "$CURRENT_VERSION")
            mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-bambu-api
            CHANGED_MODULES="$CHANGED_MODULES vlxtr-bambu-api"
            COMMIT_MESSAGE="$COMMIT_MESSAGE bambu=$NEW_VERSION"
          fi

          if [[ "${{ needs.check-all-changes.outputs.gateway_changed }}" == "true" ]]; then
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-api-gateway -q -DforceStdout)
            NEW_VERSION=$(increment_version "$CURRENT_VERSION")
            mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-api-gateway
            CHANGED_MODULES="$CHANGED_MODULES vlxtr-api-gateway"
            COMMIT_MESSAGE="$COMMIT_MESSAGE gateway=$NEW_VERSION"
          fi

          if [[ "${{ needs.check-all-changes.outputs.core_changed }}" == "true" ]]; then
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -pl vlxtr-core-api -q -DforceStdout)
            NEW_VERSION=$(increment_version "$CURRENT_VERSION")
            mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -pl vlxtr-core-api
            CHANGED_MODULES="$CHANGED_MODULES vlxtr-core-api"
            COMMIT_MESSAGE="$COMMIT_MESSAGE core=$NEW_VERSION"
          fi

          git add */pom.xml
          git commit -m "$COMMIT_MESSAGE"
          git push origin master

          if [[ ! -z "$CHANGED_MODULES" ]]; then
            mvn clean deploy -pl "$CHANGED_MODULES" -DskipTests
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
