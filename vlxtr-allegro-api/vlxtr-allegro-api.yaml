openapi: 3.0.3
info:
  title: VLXTR Allegro API v1
  description: Allegro API client for managing Allegro account.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:9090
    description: Local development server

security:
  - bearerAuth: []

tags:
  - name: Offers
    description: Endpoints related to managing and retrieving Allegro offers.
  - name: Tokens
    description: Endpoints related to authentication tokens.

paths:
  /offers:
    get:
      tags:
        - Offers
      summary: Retrieve a list of offers from Allegro
      description: Fetches offers available in Allegro based on the provided authorization token.
      operationId: getOffers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved offers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OffersResponse"
        "401":
          description: Unauthorized - Invalid or missing token.
        "500":
          description: Internal server error.

  /offers/{offerId}:
    get:
      tags:
        - Offers
      summary: Retrieve a specific offer
      description: Fetches a single offer based on the provided offer ID.
      operationId: getOfferById
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          description: The ID of the offer to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved the offer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
        "401":
          description: Unauthorized - Invalid or missing token.
        "404":
          description: Offer not found.
        "500":
          description: Internal server error.

  /tokens/register:
    post:
      tags:
        - Tokens
      summary: Register a new authentication token
      description: Registers a new authentication token using the device code authorization flow.
      operationId: registerToken
      security: []
      responses:
        "200":
          description: Successfully registered token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRegister"
        "500":
          description: Internal server error.

  /tokens/{deviceCode}:
    get:
      tags:
        - Tokens
      summary: Retrieve stored access token
      description: Returns the access token for a given deviceCode if it is still valid.
      operationId: getToken
      parameters:
        - name: deviceCode
          in: path
          required: true
          description: The device code associated with the token.
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "404":
          description: Token not found.
        "500":
          description: Internal server error.

  /tokens/{deviceCode}/refresh:
    post:
      tags:
        - Tokens
      summary: Refresh authentication token
      description: Uses the refresh token to obtain a new access token.
      operationId: refreshToken
      parameters:
        - name: deviceCode
          in: path
          required: true
          description: The device code associated with the token.
          schema:
            type: string
      responses:
        "200":
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid refresh token.
        "404":
          description: Token not found.
        "500":
          description: Internal server error.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    OffersResponse:
      type: object
      properties:
        offers:
          type: array
          items:
            $ref: "#/components/schemas/Offer"
        count:
          type: integer
          description: Number of offers returned in this response
        totalCount:
          type: integer
          description: Total number of available offers

    Offer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        primaryImage:
          $ref: "#/components/schemas/Image"
        sellingMode:
          $ref: "#/components/schemas/SellingMode"
        saleInfo:
          $ref: "#/components/schemas/SaleInfo"
        stats:
          $ref: "#/components/schemas/Stats"
        stock:
          $ref: "#/components/schemas/Stock"
        publication:
          $ref: "#/components/schemas/Publication"
        afterSalesServices:
          $ref: "#/components/schemas/AfterSalesServices"
        delivery:
          $ref: "#/components/schemas/Delivery"
        b2b:
          $ref: "#/components/schemas/B2B"
        additionalMarketplaces:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AdditionalMarketplace"

    TokenRegister:
      type: object
      properties:
        device_code:
          type: string
        expires_in:
          type: integer
        user_code:
          type: string
        interval:
          type: integer
        verification_uri:
          type: string
        verification_uri_complete:
          type: string

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: The active access token.
        refreshToken:
          type: string
          description: The refresh token used to generate new access tokens.
        expiresAt:
          type: string
          format: date-time
          description: The expiration timestamp of the access token.
